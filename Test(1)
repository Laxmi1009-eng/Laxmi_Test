Serection 1: NumPy (5 Questions)

1) Broadcasting & Array Operations
What is the output of the following code?
a = np.array([1, 2, 3])
b = np.array([[1], [2], [3]])
print(a + b)
Options:
A) [[2, 3, 4], [3, 4, 5], [4, 5, 6]]
B) [2, 4, 6]
C) [[2], [4], [6]]
D) Error (shape mismatch)

Answer: A

2)Indexing & Slicing
Given arr = np.arange(12).reshape(3, 4), which code extracts the subarray [[5, 6], [9, 10]]?
Options:
A) arr[1:3, 1:3]
B) arr[1:, 1:3]
C) arr[1:3, 1:2]
D) arr[[1,2], [1,2]]

Answer: A

3 )Vectorized Operations
Replace all negative values in arr = np.array([-2, -1, 0, 1, 2]) with 0 using a single vectorized operation.
code:
import numpy as np
arr = np.array([-2, -1, 0, 1, 2])
arr = np.where(arr < 0, 0, arr)   
print(arr)

4) Aggregation & NaN Handling
Compute the row-wise mean of matrix below, ignoring NaN values:
matrix = np.array([[1, np.nan, 3], [4, 5, np.nan]])
code: 
import numpy as np
matrix = np.array([[1, np.nan, 3],
                   [4, 5, np.nan]])
row_means = np.nanmean(matrix, axis=1)
print(row_means)

5) Advanced Indexing
What does this code return?
data = np.array([10, 20, 30, 40])
idx = np.array([True, False, True, False])
print(data[idx])
Options:
A) [10, 30]
B) [True, False, True, False]
C) [20, 40]
D) Error

answer A

Section 2: Pandas (5 Questions)
6) DataFrame Creation & Basics
Create a DataFrame df from this dictionary, ensuring the index is [100, 101, 102]:

data = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]}
code : 
import pandas as pd
data = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]}
df = pd.DataFrame(data, index=[100, 101, 102])
print(df)

8) GroupBy & Aggregation
Group df by 'Region', then compute the sum of 'Sales' and mean of 'Profit' for each group. Reset the index.

df = pd.DataFrame({ 'Region': ['North', 'South', 'North', 'South'],
    'Sales': [100, 200, 150, 250],
    'Profit': [20, 30, 25, 40]})

code :
import pandas as pd
df = pd.DataFrame({
    'Region': ['North', 'South', 'North', 'South'],
    'Sales': [100, 200, 150, 250],
    'Profit': [20, 30, 25, 40]})
result = df.groupby('Region').agg({'Sales': 'sum', 'Profit': 'mean'}).reset_index()
print(result)

9) Merging DataFrames
Merge orders and customers on 'cust_id', keeping all orders (even if no customer match exists).
orders = pd.DataFrame({'order_id': [1, 2], 'cust_id': [101, 102]})
customers = pd.DataFrame({'cust_id': [101, 103], 'name': ['Alice', 'Bob']})

code:
import pandas as pd
orders = pd.DataFrame({'order_id': [1, 2], 'cust_id': [101, 102]})
customers = pd.DataFrame({'cust_id': [101, 103], 'name': ['Alice', 'Bob']})
Left merge to keep all orders
merged_df = pd.merge(orders, customers, on='cust_id', how='left')
print(merged_df)

10)Time Series & Resampling
Convert 'Date' to datetime, set it as the index, and resample to monthly frequency, summing 'Value'.
df = pd.DataFrame({
    'Date': ['2023-01-05', '2023-01-15', '2023-02-10'],
    'Value': [10, 20, 30]})
code :
import pandas as pd
df = pd.DataFrame({
    'Date': ['2023-01-05', '2023-01-15', '2023-02-10'],
    'Value': [10, 20, 30]})
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)
monthly_sum = df.resample('M').sum()
print(monthly_sum)

